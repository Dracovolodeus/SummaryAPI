import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

API_ENDPOINT = os.getenv("API_URL") + "/api/summary/create/url"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ URL —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è summary –∏ —Ç–µ–≥–æ–≤")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (URL)
@dp.message(F.text)
async def handle_url(message: types.Message):
    url = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not url.startswith(('http://', 'https://')):
        return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")

    try:
        async with httpx.AsyncClient(timeout=113) as client:
            response = await client.get(
                API_ENDPOINT,
                params={"url": url}  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã GET-–∑–∞–ø—Ä–æ—Å–∞
            )            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤
        if response.status_code == 201:
            data = response.json()
            response_text = (
                f"üìù{data['summary']}\n\n"
                f"üè∑ –¢–µ–≥–∏:\n{', '.join(data['tags'])}"
            )
        elif response.status_code == 404:
            response_text = "‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)"
        elif response.status_code == 500:
            response_text = "üö´ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500)"
        else:
            response_text = f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code}"

    except httpx.ConnectError:
        response_text = "üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"
    except httpx.ReadTimeout:
        response_text = "‚è± –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API"
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        response_text = "‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"

    await message.answer(response_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
